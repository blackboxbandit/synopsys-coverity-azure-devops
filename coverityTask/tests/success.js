"use strict";
exports.__esModule = true;
console.log('test starts');
var tmrm = require("azure-pipelines-task-lib/mock-run");
var path = require("path");
console.log("normal imports done");
var testUtil = require('./test_util');
console.log("test imports done");
console.log('creating task');
var taskPath = path.join(__dirname, '..', 'index.js');
var tmr = new tmrm.TaskMockRunner(taskPath);
console.log('reading config');
var config = require("./config.json");
console.log('populating variables');
var cwd = config.cwd;
var home = config.home;
var bin = home + "\\bin";
var projectName = config.availableProjectName;
var streamName = config.availableStreamName;
var server = config.server;
var viewName = "All Projects";
console.log('set inputs');
tmr.setInput('projectName', projectName);
tmr.setInput('streamName', streamName);
tmr.setInput('issueView', "Outstanding Issues");
tmr.setInput('coverityBuildDirectory', cwd);
tmr.setInput('coverityRunType', "buildanalyzecommit");
tmr.setInput('coverityAnalysisType', "full");
var answers = { "checkPath": {} };
answers.checkPath[cwd] = true;
tmr.setAnswers(answers);
console.log('test utils');
testUtil.setToolHome(config.toolHome);
testUtil.setServiceInputs(server, config.username, config.password);
testUtil.registerMockBaseCommmands(tmr, bin, cwd, server, streamName);
//var mockApi = require("./coverity_soap_api_mock")(true, projectName, streamName);
//tmr.registerMock('./coverity_soap_api', mockApi);
console.log('test ready');
tmr.run();
